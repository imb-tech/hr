/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as NewLoginImport } from './routes/new-login'
import { Route as MainImport } from './routes/_main'
import { Route as AuthImport } from './routes/_auth'
import { Route as MainIndexImport } from './routes/_main/index'
import { Route as MainTestImport } from './routes/_main/test'
import { Route as MainDriversImport } from './routes/_main/drivers'
import { Route as MainDashboardImport } from './routes/_main/dashboard'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as AuthForgotPasswordImport } from './routes/_auth/forgot-password'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const NewLoginRoute = NewLoginImport.update({
  id: '/new-login',
  path: '/new-login',
  getParentRoute: () => rootRoute,
} as any)

const MainRoute = MainImport.update({
  id: '/_main',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const MainIndexRoute = MainIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRoute,
} as any)

const MainTestRoute = MainTestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => MainRoute,
} as any)

const MainDriversRoute = MainDriversImport.update({
  id: '/drivers',
  path: '/drivers',
  getParentRoute: () => MainRoute,
} as any)

const MainDashboardRoute = MainDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => MainRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/new-login': {
      id: '/new-login'
      path: '/new-login'
      fullPath: '/new-login'
      preLoaderRoute: typeof NewLoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_auth/forgot-password': {
      id: '/_auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof AuthImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/_main/dashboard': {
      id: '/_main/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof MainDashboardImport
      parentRoute: typeof MainImport
    }
    '/_main/drivers': {
      id: '/_main/drivers'
      path: '/drivers'
      fullPath: '/drivers'
      preLoaderRoute: typeof MainDriversImport
      parentRoute: typeof MainImport
    }
    '/_main/test': {
      id: '/_main/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof MainTestImport
      parentRoute: typeof MainImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexImport
      parentRoute: typeof MainImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface MainRouteChildren {
  MainDashboardRoute: typeof MainDashboardRoute
  MainDriversRoute: typeof MainDriversRoute
  MainTestRoute: typeof MainTestRoute
  MainIndexRoute: typeof MainIndexRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainDashboardRoute: MainDashboardRoute,
  MainDriversRoute: MainDriversRoute,
  MainTestRoute: MainTestRoute,
  MainIndexRoute: MainIndexRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof MainRouteWithChildren
  '/new-login': typeof NewLoginRoute
  '/register': typeof RegisterRoute
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/login': typeof AuthLoginRoute
  '/dashboard': typeof MainDashboardRoute
  '/drivers': typeof MainDriversRoute
  '/test': typeof MainTestRoute
  '/': typeof MainIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteWithChildren
  '/new-login': typeof NewLoginRoute
  '/register': typeof RegisterRoute
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/login': typeof AuthLoginRoute
  '/dashboard': typeof MainDashboardRoute
  '/drivers': typeof MainDriversRoute
  '/test': typeof MainTestRoute
  '/': typeof MainIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_main': typeof MainRouteWithChildren
  '/new-login': typeof NewLoginRoute
  '/register': typeof RegisterRoute
  '/_auth/forgot-password': typeof AuthForgotPasswordRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_main/dashboard': typeof MainDashboardRoute
  '/_main/drivers': typeof MainDriversRoute
  '/_main/test': typeof MainTestRoute
  '/_main/': typeof MainIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/new-login'
    | '/register'
    | '/forgot-password'
    | '/login'
    | '/dashboard'
    | '/drivers'
    | '/test'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/new-login'
    | '/register'
    | '/forgot-password'
    | '/login'
    | '/dashboard'
    | '/drivers'
    | '/test'
    | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/_main'
    | '/new-login'
    | '/register'
    | '/_auth/forgot-password'
    | '/_auth/login'
    | '/_main/dashboard'
    | '/_main/drivers'
    | '/_main/test'
    | '/_main/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  MainRoute: typeof MainRouteWithChildren
  NewLoginRoute: typeof NewLoginRoute
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  MainRoute: MainRouteWithChildren,
  NewLoginRoute: NewLoginRoute,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_main",
        "/new-login",
        "/register"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/forgot-password",
        "/_auth/login"
      ]
    },
    "/_main": {
      "filePath": "_main.tsx",
      "children": [
        "/_main/dashboard",
        "/_main/drivers",
        "/_main/test",
        "/_main/"
      ]
    },
    "/new-login": {
      "filePath": "new-login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_auth/forgot-password": {
      "filePath": "_auth/forgot-password.tsx",
      "parent": "/_auth"
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_main/dashboard": {
      "filePath": "_main/dashboard.tsx",
      "parent": "/_main"
    },
    "/_main/drivers": {
      "filePath": "_main/drivers.tsx",
      "parent": "/_main"
    },
    "/_main/test": {
      "filePath": "_main/test.tsx",
      "parent": "/_main"
    },
    "/_main/": {
      "filePath": "_main/index.tsx",
      "parent": "/_main"
    }
  }
}
ROUTE_MANIFEST_END */
