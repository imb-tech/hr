/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MainImport } from './routes/_main'
import { Route as AuthImport } from './routes/_auth'
import { Route as MainIndexImport } from './routes/_main/index'
import { Route as MainTestImport } from './routes/_main/test'
import { Route as MainSettingsImport } from './routes/_main/settings'
import { Route as MainProfileImport } from './routes/_main/profile'
import { Route as MainPositionImport } from './routes/_main/position'
import { Route as MainHrCreateImport } from './routes/_main/hr-create'
import { Route as MainHrImport } from './routes/_main/hr'
import { Route as AuthRegisterImport } from './routes/_auth/register'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as AuthForgotPasswordImport } from './routes/_auth/forgot-password'
import { Route as MainOfficeIdImport } from './routes/_main/office/$id'

// Create/Update Routes

const MainRoute = MainImport.update({
  id: '/_main',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const MainIndexRoute = MainIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRoute,
} as any)

const MainTestRoute = MainTestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => MainRoute,
} as any)

const MainSettingsRoute = MainSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => MainRoute,
} as any)

const MainProfileRoute = MainProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => MainRoute,
} as any)

const MainPositionRoute = MainPositionImport.update({
  id: '/position',
  path: '/position',
  getParentRoute: () => MainRoute,
} as any)

const MainHrCreateRoute = MainHrCreateImport.update({
  id: '/hr-create',
  path: '/hr-create',
  getParentRoute: () => MainRoute,
} as any)

const MainHrRoute = MainHrImport.update({
  id: '/hr',
  path: '/hr',
  getParentRoute: () => MainRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRoute,
} as any)

const MainOfficeIdRoute = MainOfficeIdImport.update({
  id: '/office/$id',
  path: '/office/$id',
  getParentRoute: () => MainRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/_auth/forgot-password': {
      id: '/_auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof AuthImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof AuthImport
    }
    '/_main/hr': {
      id: '/_main/hr'
      path: '/hr'
      fullPath: '/hr'
      preLoaderRoute: typeof MainHrImport
      parentRoute: typeof MainImport
    }
    '/_main/hr-create': {
      id: '/_main/hr-create'
      path: '/hr-create'
      fullPath: '/hr-create'
      preLoaderRoute: typeof MainHrCreateImport
      parentRoute: typeof MainImport
    }
    '/_main/position': {
      id: '/_main/position'
      path: '/position'
      fullPath: '/position'
      preLoaderRoute: typeof MainPositionImport
      parentRoute: typeof MainImport
    }
    '/_main/profile': {
      id: '/_main/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof MainProfileImport
      parentRoute: typeof MainImport
    }
    '/_main/settings': {
      id: '/_main/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof MainSettingsImport
      parentRoute: typeof MainImport
    }
    '/_main/test': {
      id: '/_main/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof MainTestImport
      parentRoute: typeof MainImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexImport
      parentRoute: typeof MainImport
    }
    '/_main/office/$id': {
      id: '/_main/office/$id'
      path: '/office/$id'
      fullPath: '/office/$id'
      preLoaderRoute: typeof MainOfficeIdImport
      parentRoute: typeof MainImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface MainRouteChildren {
  MainHrRoute: typeof MainHrRoute
  MainHrCreateRoute: typeof MainHrCreateRoute
  MainPositionRoute: typeof MainPositionRoute
  MainProfileRoute: typeof MainProfileRoute
  MainSettingsRoute: typeof MainSettingsRoute
  MainTestRoute: typeof MainTestRoute
  MainIndexRoute: typeof MainIndexRoute
  MainOfficeIdRoute: typeof MainOfficeIdRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainHrRoute: MainHrRoute,
  MainHrCreateRoute: MainHrCreateRoute,
  MainPositionRoute: MainPositionRoute,
  MainProfileRoute: MainProfileRoute,
  MainSettingsRoute: MainSettingsRoute,
  MainTestRoute: MainTestRoute,
  MainIndexRoute: MainIndexRoute,
  MainOfficeIdRoute: MainOfficeIdRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof MainRouteWithChildren
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/hr': typeof MainHrRoute
  '/hr-create': typeof MainHrCreateRoute
  '/position': typeof MainPositionRoute
  '/profile': typeof MainProfileRoute
  '/settings': typeof MainSettingsRoute
  '/test': typeof MainTestRoute
  '/': typeof MainIndexRoute
  '/office/$id': typeof MainOfficeIdRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteWithChildren
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/hr': typeof MainHrRoute
  '/hr-create': typeof MainHrCreateRoute
  '/position': typeof MainPositionRoute
  '/profile': typeof MainProfileRoute
  '/settings': typeof MainSettingsRoute
  '/test': typeof MainTestRoute
  '/': typeof MainIndexRoute
  '/office/$id': typeof MainOfficeIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_main': typeof MainRouteWithChildren
  '/_auth/forgot-password': typeof AuthForgotPasswordRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_main/hr': typeof MainHrRoute
  '/_main/hr-create': typeof MainHrCreateRoute
  '/_main/position': typeof MainPositionRoute
  '/_main/profile': typeof MainProfileRoute
  '/_main/settings': typeof MainSettingsRoute
  '/_main/test': typeof MainTestRoute
  '/_main/': typeof MainIndexRoute
  '/_main/office/$id': typeof MainOfficeIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/hr'
    | '/hr-create'
    | '/position'
    | '/profile'
    | '/settings'
    | '/test'
    | '/'
    | '/office/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/hr'
    | '/hr-create'
    | '/position'
    | '/profile'
    | '/settings'
    | '/test'
    | '/'
    | '/office/$id'
  id:
    | '__root__'
    | '/_auth'
    | '/_main'
    | '/_auth/forgot-password'
    | '/_auth/login'
    | '/_auth/register'
    | '/_main/hr'
    | '/_main/hr-create'
    | '/_main/position'
    | '/_main/profile'
    | '/_main/settings'
    | '/_main/test'
    | '/_main/'
    | '/_main/office/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  MainRoute: typeof MainRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  MainRoute: MainRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_main"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/forgot-password",
        "/_auth/login",
        "/_auth/register"
      ]
    },
    "/_main": {
      "filePath": "_main.tsx",
      "children": [
        "/_main/hr",
        "/_main/hr-create",
        "/_main/position",
        "/_main/profile",
        "/_main/settings",
        "/_main/test",
        "/_main/",
        "/_main/office/$id"
      ]
    },
    "/_auth/forgot-password": {
      "filePath": "_auth/forgot-password.tsx",
      "parent": "/_auth"
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/register": {
      "filePath": "_auth/register.tsx",
      "parent": "/_auth"
    },
    "/_main/hr": {
      "filePath": "_main/hr.tsx",
      "parent": "/_main"
    },
    "/_main/hr-create": {
      "filePath": "_main/hr-create.tsx",
      "parent": "/_main"
    },
    "/_main/position": {
      "filePath": "_main/position.tsx",
      "parent": "/_main"
    },
    "/_main/profile": {
      "filePath": "_main/profile.tsx",
      "parent": "/_main"
    },
    "/_main/settings": {
      "filePath": "_main/settings.tsx",
      "parent": "/_main"
    },
    "/_main/test": {
      "filePath": "_main/test.tsx",
      "parent": "/_main"
    },
    "/_main/": {
      "filePath": "_main/index.tsx",
      "parent": "/_main"
    },
    "/_main/office/$id": {
      "filePath": "_main/office/$id.tsx",
      "parent": "/_main"
    }
  }
}
ROUTE_MANIFEST_END */
